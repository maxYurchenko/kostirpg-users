plugins {
  id 'java'
  id "com.github.node-gradle.node" version '3.2.0'
  id 'com.enonic.xp.app' version '2.0.0'
  id 'no.item.xp.codegen' version '1.1.6'
  id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

app {
  name = "${appName}"
  displayName = "${appDisplayName}"
  vendorName = "${vendorName}"
  vendorUrl = "${vendorUrl}"
  systemVersion = "${xpVersion}"
}

dependencies {
  compile "com.enonic.xp:script-api:${xpVersion}"
  include "com.enonic.xp:lib-content:${xpVersion}"
  include "com.enonic.xp:lib-portal:${xpVersion}"
  include "com.enonic.lib:lib-thymeleaf:2.0.1"
  include "com.enonic.xp:lib-auth:${xpVersion}"
  include "com.enonic.xp:lib-context:${xpVersion}"
  include "com.enonic.xp:lib-i18n:${xpVersion}"
  include "com.enonic.xp:lib-node:${xpVersion}"
  include 'com.enonic.lib:lib-text-encoding:2.0.0'
  include "com.enonic.xp:lib-repo:${xpVersion}"
  include "com.enonic.xp:lib-mail:${xpVersion}"
  include "com.enonic.lib:lib-util:3.0.0"
}

repositories {
  mavenLocal()
  jcenter()
  xp.enonicRepo()
  maven {
    url 'http://repo.mysite.com/public'
  }
  maven {
    url 'http://repo.enonic.com/public'
  }
}

node {
  download = true
  version = '14.15.0'
}

task npmInstallForce( type: NpmTask ) {
  description = 'Update all project node dependencies'
  args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
  delete 'node_modules'
}

task serverWebpack( type: NodeTask, dependsOn: npmInstall ) {
  environment = [ 'NODE_ENV': nodeEnvironment() ]
  // args = [ '--config', 'webpack.server.config.babel.js', '--color', '--hide-modules' ]
  args = [ '--config', 'webpack.server.config.js', '--color' ]
  description = 'Build server JS.'
  inputs.dir 'src/main'
  outputs.dir "${buildDir}/resources/main"
  script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

jar {
  exclude 'assets/styles/**/*.less'
  exclude 'assets/styles/**/*.sass'
  exclude 'assets/styles/**/*.scss'
  exclude 'assets/styles/**/*.js'

  dependsOn += serverWebpack
  dependsOn += generateTypeScript
}

jar.outputs.dir "${buildDir}/resources/main"

def nodeEnvironment() {
  def environments = [ prod : 'production', dev: 'development' ]
  def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
  return nodeEnv != null ? nodeEnv : 'production'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      groupId group
      artifactId projectName
      version version
    }
  }
}